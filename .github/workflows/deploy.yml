name: Java CI with Gradle

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      name:
        type: choice
        description: What do you want to deploy?
        options:
          - insta-tistory-automator-server
      cache:
        type: boolean
        description: Enable cache?
        default: true

env:
  SERVICE_NAME: ${{ inputs.name }}
  SECRETS_KEY: "SECRETS_JSON"
  SECRETS_FILE: "secrets.json"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SERVER_DIR: server/${{ inputs.name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore gradle cache if exists
        id: cache-gradle
        uses: actions/cache/restore@v4
        if: ${{ inputs.cache }}
        with:
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          path: |
            .gradle
          restore-keys: |
            gradle-${{ runner.os }}
            gradle-

      - name: Gradle build
        run: |
          docker compose --env-file=${{ env.SERVER_DIR }}/.env -f ${{ env.SERVER_DIR }}/ci/compose.yaml up --detach --force-recreate
          ./gradlew -p ${{ env.SERVER_DIR }} --build-cache build -i     
          docker compose --env-file=${{ env.SERVER_DIR }}/.env -f ${{ env.SERVER_DIR }}/ci/compose.yaml down --remove-orphans

      - name: Save gradle cache
        if: always() && steps.cache-gradle.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-gradle.outputs.cache-primary-key }}
          path: |
            .gradle

      - name: Configure AWS Credentials@v4
        uses: aws-actions/configure-aws-credentials@v3
        with:
          audience: 'sts.amazonaws.com'
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR Private
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup secret
        run: echo "${{ toJson(secrets) }}" > ${{ env.SECRETS_FILE }}

      - name: Build and push to ECR
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.name }}
          file: cd/Dockerfile
          push: true
          secret-files: ${{ env.SECRETS_KEY }}=${{ env.SECRETS_FILE }}
          tags: ${{ secrets.ECR_HOST }}/${{ env.SERVICE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha, mode=max
          build-args: SERVER_DIR_ARG=${{ env.SERVER_DIR }}
          provenance: false

      - name: Clean up
        if: always()
        run: |
          rm -f ${{ env.SECRETS_FILE }}
