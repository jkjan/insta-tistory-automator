name: Java CI with Gradle

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      name:
        type: choice
        description: What do you want to deploy?
        options:
          - insta-tistory-automator-server
      cache:
        type: boolean
        description: Enable cache?
        default: true

env:
  SERVICE_NAME: ${{ inputs.name }}
  SECRETS_KEY: "SECRETS_JSON"
  SECRETS_FILE: "secrets.json"

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ inputs.name }}

      - name: Restore gradle cache if exists
        id: cache-gradle
        uses: actions/cache/restore@v4
        if: ${{ inputs.cache }}
        with:
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          path: |
            ${{ inputs.name }}/.gradle
            ${{ inputs.name }}/build
          restore-keys: |
            gradle-${{ runner.os }}
            gradle-

      - name: Gradle build
        run: docker compose --env-file=.env -f ci/compose.yaml up --build --abort-on-container-exit --force-recreate

      - name: Save gradle cache
        if: always() && steps.cache-gradle.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-gradle.outputs.cache-primary-key }}
          path: |
            ${{ inputs.name }}/.gradle
            ${{ inputs.name }}/build

      - name: Configure AWS Credentials@v4
        uses: aws-actions/configure-aws-credentials@v3
        with:
          audience: 'sts.amazonaws.com'
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR Private
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: temp debugging jq
        run: |
          docker build -f cd/Dockerfile -t jun/${{ env.SERVICE_NAME }} --secret id=${{ env.SECRETS_KEY }},src=secrets.json --progress=plain --no-cache .

      - name: Build and push to ECR
        uses: docker/build-push-action@v6
        env:
          SECRETS_JSON: ${{ toJson(secrets) }}
        with:
          context: ${{ inputs.name }}
          file: ${{ inputs.name }}/cd/Dockerfile
          push: true
          secret-envs: ${{ env.SECRETS_KEY }}=${{ env.SECRETS_JSON }}
          tags: ${{ secrets.ECR_HOST }}/${{ env.SERVICE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha, mode=max
          provenance: false

      - name: Clean up
        if: always()
        run: |
          rm -f ${{ env.SECRETS_FILE }}
