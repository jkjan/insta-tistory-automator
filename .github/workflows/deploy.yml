name: Java CI with Gradle

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      name:
        type: choice
        description: What do you want to deploy?
        options:
          - insta-tistory-automator-server
      cache:
        type: boolean
        description: Enable cache?
        default: true

env:
  SERVICE_NAME: ${{ inputs.name }}
  SECRETS_KEY: "SECRETS_JSON"
  SECRETS_FILE: "secrets.json"
  SERVER_DIR: server/${{ inputs.name }}

jobs:
  build-gradle:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java with gradle cache
        uses: 'actions/setup-java@v4'
        if: ${{ inputs.cache }}
        with:
          distribution: 'corretto'
          java-version: '21'
          cache: 'gradle'

      - name: Setup Java without gradle cache
        uses: 'actions/setup-java@v4'
        if: ${{ !inputs.cache }}
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Gradle build
        run: |
          docker compose --env-file=${{ env.SERVER_DIR }}/.env -f ${{ env.SERVER_DIR }}/ci/compose.yaml up --detach --force-recreate
          ./gradlew -p ${{ env.SERVER_DIR }} --build-cache build -i     
          docker compose --env-file=${{ env.SERVER_DIR }}/.env -f ${{ env.SERVER_DIR }}/ci/compose.yaml down --remove-orphans

      - name: Upload Jar file
        uses: actions/upload-artifact@v4
        with:
          name: server-jar-file
          path: ${{ env.SERVER_DIR }}/build/libs/*.jar

  push-to-ecr:
    runs-on: ubuntu-latest
    needs: build-gradle

    steps:
      - name: Configure AWS Credentials@v4
        uses: aws-actions/configure-aws-credentials@v3
        with:
          audience: 'sts.amazonaws.com'
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR Private
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Download Jar file
        uses: actions/download-artifact@v4

      - name: Setup secret
        run: |
          echo "${{ toJson(secrets) }}" > ${{ env.SECRETS_FILE }}
          ls -al

      - name: Setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push to ECR with cache
        if: ${{ inputs.cache }}
        uses: docker/build-push-action@v6
        with:
          file: cd/Dockerfile
          push: true
          secret-files: ${{ env.SECRETS_KEY }}=${{ env.SECRETS_FILE }}
          tags: ${{ secrets.ECR_HOST }}/${{ env.SERVICE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha, mode=max
          provenance: false

      - name: Build and push to ECR without cache
        if: ${{ !inputs.cache }}
        uses: docker/build-push-action@v6
        with:
          file: cd/Dockerfile
          push: true
          secret-files: ${{ env.SECRETS_KEY }}=${{ env.SECRETS_FILE }}
          tags: ${{ secrets.ECR_HOST }}/${{ env.SERVICE_NAME }}:latest
          provenance: false

      - name: Clean up
        if: always()
        run: |
          rm -f ${{ env.SECRETS_FILE }}
