# creates a testing environment and proceed tests and build
# docker compose --env-file=.env -f ci/compose.yaml up --build --abort-on-container-exit --force-recreate

services:
  postgresql:
    image: ${DB_IMAGE}
    ports:
      - ${DB_PORT}:5432
    environment:
      - POSTGRES_DB=insta_tistory_automator_server
      - POSTGRES_USER=${SPRING_DATASOURCE_USERNAME}
      - POSTGRES_PASSWORD=${SPRING_DATASOURCE_PASSWORD}

  selenium:
    image: ${SELENIUM_IMAGE}
    ports:
      - ${SELENIUM_PORT}:4444

  spring-app:
    build:
      context: ..
      dockerfile: ci/Dockerfile
    image: jun/${SERVICE_NAME}-builder
    container_name: ${SERVICE_NAME}-builder
    command: sh -c """
      /app/gradlew --build-cache build -i && 
      chmod -R 777 /root/.gradle && 
      chmod -R 777 /app/build
      """
    environment:
      - SPRING_DATASOURCE_URL=jdbc:${DB}://${DB}:${DB_PORT}/insta_tistory_automator_server
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_PROFILES_ACTIVE=mock-test
      - WEBDRIVER_REMOTE_URL=http://selenium:${SELENIUM_PORT}
    volumes:
      - ../.gradle:/root/.gradle
      - ../build:/app/build
    ports:
      - ${SERVER_PORT}:8080
    depends_on:
      - ${DB}
      - selenium
